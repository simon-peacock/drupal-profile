<?php

/**
 * @file
 * Code for the UBM EMEA Event feature.
 */

include_once 'ubm_emea_event.features.inc';

/**
 * Implements hook_form_FORM_ID_alter().
 */
function ubm_emea_event_form_event_node_form_alter(&$form, &$form_state, $form_id) {
  $child_sites = variable_get('ubm_emea_umbrella_child_sites', '');

  if ($child_sites != '') {

    $result = _ubm_emea_event_get_event_nodes($child_sites,'event', $form['nid']['#value']);

    $form['field_event_location'][LANGUAGE_NONE]['#options']
      = array_merge($form['field_event_location'][LANGUAGE_NONE]['#options'], $result['child_sites']);

    if (!empty($result)) {
      $form['field_event_location'][LANGUAGE_NONE]['#default_value'] = $result['default'];
    }

  }
  else {
    $form['field_event_location']['#access'] = FALSE;
    array_unshift($form['#submit'], '_ubm_emea_event_node_event_form_alter_submit');
  }
  $form['#validate'][] = '_ubm_emea_event_node_event_form_alter_validate';
}

/**
 * Helper function to retrieve event site names.
 */
function _ubm_emea_event_get_event_nodes($child_sites,$event, $nid) {

  $sites = array();
  foreach (explode(',', $child_sites) as $site) {
    $sites[strtolower($site)] = $site;
  }

  $query = db_select('field_data_field_event_location', 'fe')
    ->fields('fe', array('field_event_location_value'))
    ->condition('entity_id', $nid)
    ->condition('entity_type', 'node')
    ->condition('bundle', $event);
  $result = $query->execute()->fetchCol();

  return array(
    'default' => $result,
    'child_sites' => $sites,
  );
}

/**
 * Custom submit function.
 */
function _ubm_emea_event_node_event_form_alter_submit(&$form, &$form_state) {
  $form['field_event_location']['#access']                                              = TRUE;
  $form['field_event_location'][LANGUAGE_NONE]['#value']                                = ' ';
  $form['field_event_location'][LANGUAGE_NONE]['#default_value']                        = ' ';
  $form_state['build_info']['args'][0]->field_event_location[LANGUAGE_NONE][0]['value'] = ' ';
  $form_state['input']['field_event_location'][LANGUAGE_NONE]                           = ' ';
  $form_state['values']['field_event_location'][LANGUAGE_NONE][0]['value']              = ' ';
}

/**
 * Custom validation function.
 */
function _ubm_emea_event_node_event_form_alter_validate(&$form, &$form_state) {
  if ($form['field_event_link_type'][LANGUAGE_NONE]['#value'] == 'internal'
          && $form['field_event_location'][LANGUAGE_NONE]['#value'] == '_none') {
    form_set_error(t('Event Location'), t('The internal event location must be set.'));
  }

  if ($form['field_event_link_type'][LANGUAGE_NONE]['#value'] == 'external'
          && $form['field_event_external_location_li'][LANGUAGE_NONE][0]['value']['#value'] == '') {
    form_set_error(t('Event Location'), t('The external event location must be set.'));
  }
}

/**
 * Implements hook_html_head_alter().
 *
 * Add event snippets to front page.
 */
function ubm_emea_event_html_head_alter(&$head_elements) {
  if (drupal_is_front_page()) {
    $snippets = _ubm_emea_event_get_snippet();
    if ($snippets) {
      $head_elements['ubm_emea_event_snippet'] = array(
        '#type' => 'html_tag',
        '#tag' => 'script',
        '#attributes' => array(
          'type' => 'application/ld+json',
        ),
        '#value' => $snippets,
      );
    }
  }
}

/**
 * Creates events snippet.
 *
 * @return string
 *   JSON encoded event snipped
 */
function _ubm_emea_event_get_snippet() {
  global $base_url;

  $parsed_base_url = parse_url($base_url);
  $base_domain_url = 'http://' . $parsed_base_url['host'];

  $site_type = variable_get('ubm_site_type', 'single');

  // Load events.
  $event_nids_query = db_select('node', 'n');
  $event_nids_query->join('field_data_field_event_dates', 'date', "n.nid = date.entity_id AND date.entity_type = 'node'");
  $nids = $event_nids_query->fields('n', array('nid'))
    ->condition('type', 'event')
    ->condition('status', 1)
    ->orderBy('field_event_dates_value', 'DESC')
    ->condition('field_event_dates_value', time(), '>')
    ->execute()
    ->fetchCol();

  if (count($nids) == 0) {
    return FALSE;
  }

  $snippets = array();
  $events = node_load_multiple($nids);

  // Create snippet array.
  foreach ($events as $event) {
    $snippet = array(
      '@context' => 'http://schema.org',
      '@type' => 'Event',
      'name' => $event->title,
      'startDate' => date('c', $event->field_event_dates[LANGUAGE_NONE][0]['value']),
      'image' => file_create_url($event->field_event_logo[LANGUAGE_NONE][0]['uri']),
    );

    if (!empty($event->field_event_dates[LANGUAGE_NONE][0]['value2'])) {
      $snippet['endDate'] = date('c', $event->field_event_dates[LANGUAGE_NONE][0]['value2']);
    }

    if ($site_type == 'single') {
      $snippet['offers'] = array(
        array(
          'name' => 'Book a stand',
          'url' => url('exhibit/book-your-stand', array('absolute' => TRUE)),
        ),
        array(
          'name' => 'Register as visitor',
          'url' => url('visit/visitor-registration', array('absolute' => TRUE)),
        ),
      );
    }
    else {
      if ($event->field_event_link_type[LANGUAGE_NONE][0]['value'] == 'internal') {
        $snippet['url'] = $base_domain_url . '/' . $event->field_event_location[LANGUAGE_NONE][0]['value'];
        $snippet['offers'] = array(
          array(
            'name' => 'Book a stand',
            'url' => $base_domain_url . '/' . $event->field_event_location[LANGUAGE_NONE][0]['value']
            . '/exhibit/book-your-stand',
          ),
          array(
            'name' => 'Register as visitor',
            'url' => $base_domain_url . '/' . $event->field_event_location[LANGUAGE_NONE][0]['value']
            . '/visit/visitor-registration',
          ),
        );
      }
      else {
        $snippet['url'] = $event->field_event_external_location_li[LANGUAGE_NONE][0]['value'];
      }
    }

    $location = array(
      '@type' => 'Place',
      'name' => $event->field_event_venue_name[LANGUAGE_NONE][0]['safe_value'],
    );

    $location['address'] = array(
      '@type' => 'PostalAddress',
      'addressLocality' => $event->field_event_city[LANGUAGE_NONE][0]['safe_value'],
      'addressCountry' => $event->field_event_country[LANGUAGE_NONE][0]['iso2'],
    );

    if (!empty($event->field_event_address)) {
      $location['address']['streetAddress'] = $event->field_event_address[LANGUAGE_NONE][0]['safe_value'];
    }

    if (!empty($event->field_event_map_location)) {
      $location['geo'] = array(
        '@type' => 'GeoCoordinates',
        'latitude' => $event->field_event_map_location[LANGUAGE_NONE][0]['lat'],
        'longitude' => $event->field_event_map_location[LANGUAGE_NONE][0]['lon'],
      );
    }

    $snippet['location'] = $location;

    $snippets[] = $snippet;
  }

  return json_encode($snippets);
}
